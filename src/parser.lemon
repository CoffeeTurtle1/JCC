%include {

#include "jcc.h"

static char *cur_filename;
static int cur_line_num;
static char *cur_tok_str;

}

%syntax_error {
    error(cur_filename, cur_line_num, "syntax error near \"%s\".", cur_tok_str);
}

%parse_accept {
    printf("Parsing done.\n");
}

%parse_failure {
}

%stack_overflow {
    error(cur_filename, cur_line_num, "parser stack overflow.");
}

%code {

#include <stdlib.h>
#include <string.h>

extern int yylex();
extern char *yytext;
extern FILE *yyin;
extern int yylineno;

void parse(char *filename)
{
    cur_filename = filename;
    yyin = fopen(filename, "r");
    void *parser = ParseAlloc(malloc);
    int token_id;

    // Uncomment for debugging
    // ParseTrace(stdout, "Parser: ");

    while ((token_id = yylex())) {
        cur_tok_str = strdup(yytext);
        cur_line_num = yylineno;
        Parse(parser, token_id, strdup(yytext));
    }

    Parse(parser, 0, NULL);
    ParseFree(parser, free);
    fclose(yyin);
}

}

%token_prefix TOK_
%token_type   { const char * }

program ::= translation_unit.

translation_unit ::= external_decl.
translation_unit ::= translation_unit external_decl.

external_decl ::= decl.
external_decl ::= function_definition.

function_definition ::= decl_specs declarator compound_statement.
function_definition ::= decl_specs declarator decl_list compound_statement.

// Declarations

decl ::= decl_specs SEMICOLON.
decl ::= decl_specs init_declarator_list SEMICOLON.

decl_list ::= decl.
decl_list ::= decl_list decl.

decl_specs ::= storage_class_specifier.
decl_specs ::= storage_class_specifier decl_specs.
decl_specs ::= type_specifier.
decl_specs ::= type_specifier decl_specs.
decl_specs ::= type_qualifier.
decl_specs ::= type_qualifier decl_specs.
decl_specs ::= KWD_INLINE.
decl_specs ::= KWD_INLINE decl_specs.

init_declarator_list ::= init_declarator.
init_declarator_list ::= init_declarator_list COMMA init_declarator.

init_declarator ::= declarator.
init_declarator ::= declarator OP_EQUALS initializer.

storage_class_specifier ::= KWD_TYPEDEF.
storage_class_specifier ::= KWD_EXTERN.
storage_class_specifier ::= KWD_STATIC.
storage_class_specifier ::= KWD_AUTO.
storage_class_specifier ::= KWD_REGISTER.

specifier_qualifier_list ::= type_specifier.
specifier_qualifier_list ::= type_specifier specifier_qualifier_list.
specifier_qualifier_list ::= type_qualifier.
specifier_qualifier_list ::= type_qualifier specifier_qualifier_list.

type_specifier ::= KWD_VOID.
type_specifier ::= KWD_CHAR.
type_specifier ::= KWD_SHORT.
type_specifier ::= KWD_LONG.
type_specifier ::= KWD_INT.
type_specifier ::= KWD_FLOAT.
type_specifier ::= KWD_DOUBLE.
type_specifier ::= KWD_SIGNED.
type_specifier ::= KWD_UNSIGNED.
type_specifier ::= KWD__BOOL.
type_specifier ::= KWD__COMPLEX.
type_specifier ::= KWD__IMAGINARY.
type_specifier ::= TYPEDEF_NAME.
type_specifier ::= struct_or_union_specifier.
type_specifier ::= enum_specifier.

struct_or_union_specifier ::= struct_or_union IDENT LBRACE
                              struct_declaration_list RBRACE.
struct_or_union_specifier ::= struct_or_union LBRACE struct_declaration_list
                              RBRACE.
struct_or_union_specifier ::= struct_or_union IDENT.

struct_or_union ::= KWD_STRUCT.
struct_or_union ::= KWD_UNION.

struct_declaration_list ::= struct_declaration.
struct_declaration_list ::= struct_declaration_list struct_declaration.

struct_declaration ::= specifier_qualifier_list struct_declarator_list SEMICOLON.

struct_declarator_list ::= struct_declarator.
struct_declarator_list ::= struct_declarator_list COMMA struct_declarator.

struct_declarator ::= declarator.
struct_declarator ::= COLON constant_expr.
struct_declarator ::= declarator COLON constant_expr.

enum_specifier ::= KWD_ENUM LBRACE enumerator_list RBRACE.
enum_specifier ::= KWD_ENUM IDENT LBRACE enumerator_list RBRACE.
enum_specifier ::= KWD_ENUM LBRACE enumerator_list COMMA RBRACE.
enum_specifier ::= KWD_ENUM IDENT LBRACE enumerator_list COMMA RBRACE.
enum_specifier ::= KWD_ENUM IDENT.

enumerator_list ::= enumerator.
enumerator_list ::= enumerator_list COMMA enumerator.

enumerator ::= ENUMERATION_CONSTANT.
enumerator ::= ENUMERATION_CONSTANT OP_EQUALS constant_expr.

declarator ::= direct_declarator.
declarator ::= pointer direct_declarator.

// Direct declarator
direct_declarator ::= IDENT.
direct_declarator ::= LPAREN declarator RPAREN.
direct_declarator ::= direct_declarator LSQUARE RSQUARE.
direct_declarator ::= direct_declarator LSQUARE type_qualifier_list
                      assignment_expr RSQUARE.
direct_declarator ::= direct_declarator LSQUARE assignment_expr RSQUARE.
direct_declarator ::= direct_declarator LSQUARE type_qualifier_list RSQUARE.
direct_declarator ::= direct_declarator LSQUARE KWD_STATIC assignment_expr
                      RSQUARE.
direct_declarator ::= direct_declarator LSQUARE KWD_STATIC type_qualifier_list
                      assignment_expr RSQUARE.
direct_declarator ::= direct_declarator LSQUARE type_qualifier_list KWD_STATIC
                      assignment_expr RSQUARE.
direct_declarator ::= direct_declarator LSQUARE OP_ASTERISK RSQUARE.
direct_declarator ::= direct_declarator LSQUARE type_qualifier_list OP_ASTERISK
                      RSQUARE.
direct_declarator ::= direct_declarator LPAREN parameter_type_list RPAREN.
direct_declarator ::= direct_declarator LPAREN identifier_list RPAREN.
direct_declarator ::= direct_declarator LPAREN RPAREN.

// Pointer
pointer ::= OP_ASTERISK.
pointer ::= OP_ASTERISK type_qualifier_list.
pointer ::= OP_ASTERISK pointer.
pointer ::= OP_ASTERISK type_qualifier_list pointer.

type_qualifier_list ::= type_qualifier.
type_qualifier_list ::= type_qualifier_list type_qualifier.

type_qualifier ::= KWD_CONST.
type_qualifier ::= KWD_RESTRICT.
type_qualifier ::= KWD_VOLATILE.

// Parameters
parameter_type_list ::= parameter_list.
parameter_type_list ::= parameter_list COMMA ELLIPSIS.

parameter_list ::= parameter_decl.
parameter_list ::= parameter_list COMMA parameter_decl.

parameter_decl ::= decl_specs.
parameter_decl ::= decl_specs declarator.

// Type name
type_name ::= specifier_qualifier_list.
type_name ::= specifier_qualifier_list abstract_declarator.

// Direct abstract declarator
direct_abstract_declarator ::= LPAREN abstract_declarator RPAREN.
direct_abstract_declarator ::= LSQUARE RSQUARE.
direct_abstract_declarator ::= LSQUARE assignment_expr RSQUARE.
direct_abstract_declarator ::= direct_abstract_declarator LSQUARE RSQUARE.
direct_abstract_declarator ::= direct_abstract_declarator LSQUARE assignment_expr
                               RSQUARE.
direct_abstract_declarator ::= direct_abstract_declarator LSQUARE OP_ASTERISK
                               RSQUARE.
direct_abstract_declarator ::= LSQUARE OP_ASTERISK RSQUARE.
direct_abstract_declarator ::= LPAREN RPAREN.
direct_abstract_declarator ::= LPAREN parameter_type_list RPAREN.
direct_abstract_declarator ::= direct_abstract_declarator LPAREN RPAREN.
direct_abstract_declarator ::= direct_abstract_declarator LPAREN
                               parameter_type_list RPAREN.

abstract_declarator ::= pointer.
abstract_declarator ::= direct_abstract_declarator.
abstract_declarator ::= pointer direct_abstract_declarator.

identifier_list ::= IDENT.
identifier_list ::= identifier_list COMMA IDENT.

// Initializer
initializer ::= assignment_expr.
initializer ::= LBRACE initializer_list RBRACE.
initializer ::= LBRACE initializer_list COMMA RBRACE.

initializer_list ::= initializer.
initializer_list ::= designation initializer.
initializer_list ::= initializer_list COMMA initializer.
initializer_list ::= initializer_list COMMA designation initializer.

// Designation
designation ::= designator_list OP_EQUALS.

designator_list ::= designator.
designator_list ::= designator_list designator.

designator ::= LSQUARE constant_expr RSQUARE.
designator ::= DOT IDENT.

// Statements

statement ::= open_statement.
statement ::= closed_statement.

simple_statement ::= iteration_statement.
simple_statement ::= jump_statement.
simple_statement ::= labeled_statement.
simple_statement ::= compound_statement.
simple_statement ::= expression_statement.
simple_statement ::= selection_statement.

closed_statement ::= simple_statement.

// If else
closed_statement ::= KWD_IF LPAREN expression RPAREN closed_statement KWD_ELSE
                     closed_statement.
open_statement ::= KWD_IF LPAREN expression RPAREN statement.
open_statement ::= KWD_IF LPAREN expression RPAREN closed_statement KWD_ELSE
                   open_statement.

// Switch statement
selection_statement ::= KWD_SWITCH LPAREN expression RPAREN statement.

// Labeled statement
labeled_statement ::= IDENT COLON statement.
labeled_statement ::= KWD_CASE constant_expr COLON statement.
labeled_statement ::= KWD_DEFAULT COLON statement.

// Compound statement
compound_statement ::= LBRACE RBRACE.
compound_statement ::= LBRACE block_item_list RBRACE.

block_item_list ::= block_item.
block_item_list ::= block_item_list block_item.

block_item ::= decl.
block_item ::= statement.

// Expr statement
expression_statement ::= expression SEMICOLON.

// While and do while
closed_statement ::= KWD_WHILE LPAREN expression RPAREN closed_statement.
open_statement ::= KWD_WHILE LPAREN expression RPAREN open_statement.
iteration_statement ::= KWD_DO statement KWD_WHILE LPAREN expression RPAREN
                        SEMICOLON.
// For loop
open_statement ::= KWD_FOR LPAREN expression_statement expression_statement
                   expression RPAREN open_statement.
open_statement ::= KWD_FOR LPAREN expression_statement expression_statement
                   RPAREN open_statement.
open_statement ::= KWD_FOR LPAREN decl expression_statement
                   expression RPAREN open_statement.
open_statement ::= KWD_FOR LPAREN decl expression_statement
                   RPAREN open_statement.

closed_statement ::= KWD_FOR LPAREN expression_statement expression_statement
                     expression RPAREN closed_statement.
closed_statement ::= KWD_FOR LPAREN expression_statement expression_statement
                     RPAREN closed_statement.
closed_statement ::= KWD_FOR LPAREN decl expression_statement
                     expression RPAREN closed_statement.
closed_statement ::= KWD_FOR LPAREN decl expression_statement
                     RPAREN closed_statement.

// Jump statements
jump_statement ::= KWD_GOTO IDENT SEMICOLON.
jump_statement ::= KWD_CONTINUE SEMICOLON.
jump_statement ::= KWD_BREAK SEMICOLON.
jump_statement ::= KWD_RETURN SEMICOLON.
jump_statement ::= KWD_RETURN expression SEMICOLON.

// Expressions

constant_expr ::= conditional_expr.

expression ::= assignment_expr.
expression ::= expression COMMA assignment_expr.

// Assignment operators
assignment_op ::= OP_EQUALS.
assignment_op ::= OP_TIMES_EQUALS.
assignment_op ::= OP_DIVIDE_EQUALS.
assignment_op ::= OP_MODULO_EQUALS.
assignment_op ::= OP_PLUS_EQUALS.
assignment_op ::= OP_MINUS_EQUALS.
assignment_op ::= OP_SHIFT_LEFT_EQUALS.
assignment_op ::= OP_SHIFT_RIGHT_EQUALS.
assignment_op ::= OP_AND_EQUALS.
assignment_op ::= OP_XOR_EQUALS.
assignment_op ::= OP_OR_EQUALS.

// Assignment expression
assignment_expr ::= conditional_expr.
assignment_expr ::= unary_expr assignment_op assignment_expr.

conditional_expr ::= logical_or_expr.
conditional_expr ::= logical_or_expr QUESTION_MARK expression COLON
                     conditional_expr.

logical_or_expr ::= logical_and_expr.
logical_or_expr ::= logical_or_expr OP_LOGICAL_OR logical_and_expr.

logical_and_expr ::= inclusive_or_expr.
logical_and_expr ::= logical_and_expr OP_LOGICAL_AND inclusive_or_expr.

inclusive_or_expr ::= exclusive_or_expr.
inclusive_or_expr ::= inclusive_or_expr OP_OR exclusive_or_expr.

exclusive_or_expr ::= and_expr.
exclusive_or_expr ::= exclusive_or_expr OP_CARET and_expr.

and_expr ::= equality_expr.
and_expr ::= and_expr OP_AND equality_expr.

equality_expr ::= relational_expr.
equality_expr ::= equality_expr OP_EQUALITY relational_expr.
equality_expr ::= equality_expr OP_NOT_EQUAL relational_expr.

relational_expr ::= shift_expr.
relational_expr ::= relational_expr OP_LESS_THAN shift_expr.
relational_expr ::= relational_expr OP_MORE_THAN shift_expr.
relational_expr ::= relational_expr OP_LESS_THAN_OR_EQUAL shift_expr.
relational_expr ::= relational_expr OP_MORE_THAN_OR_EQUAL shift_expr.

shift_expr ::= additive_expr.
shift_expr ::= shift_expr OP_SHIFT_LEFT additive_expr.
shift_expr ::= shift_expr OP_SHIFT_RIGHT additive_expr.

additive_expr ::= multiplicative_expr.
additive_expr ::= additive_expr OP_PLUS multiplicative_expr.
additive_expr ::= additive_expr OP_MINUS multiplicative_expr.

multiplicative_expr ::= cast_expr.
multiplicative_expr ::= multiplicative_expr OP_ASTERISK cast_expr.
multiplicative_expr ::= multiplicative_expr OP_DIVIDE cast_expr.
multiplicative_expr ::= multiplicative_expr OP_MODULO cast_expr.

cast_expr ::= unary_expr.
cast_expr ::= LPAREN type_name RPAREN cast_expr.

unary_op ::= OP_AND.
unary_op ::= OP_ASTERISK.
unary_op ::= OP_PLUS.
unary_op ::= OP_MINUS.
unary_op ::= OP_TILDE.
unary_op ::= OP_NOT.

unary_expr ::= postfix_expr.
unary_expr ::= OP_PLUS_PLUS unary_expr.
unary_expr ::= OP_MINUS_MINUS unary_expr.
unary_expr ::= unary_op cast_expr.
unary_expr ::= OP_SIZEOF unary_expr.
unary_expr ::= OP_SIZEOF LPAREN type_name RPAREN.

argument_expr_list ::= assignment_expr.
argument_expr_list ::= argument_expr_list COMMA assignment_expr.

postfix_expr ::= primary_expr.
postfix_expr ::= postfix_expr LSQUARE expression RSQUARE.
postfix_expr ::= postfix_expr LPAREN argument_expr_list RPAREN.
postfix_expr ::= postfix_expr DOT IDENT.
postfix_expr ::= postfix_expr OP_ARROW IDENT.
postfix_expr ::= postfix_expr OP_PLUS_PLUS.
postfix_expr ::= postfix_expr OP_MINUS_MINUS.
postfix_expr ::= LPAREN type_name RPAREN LBRACE initializer_list RBRACE.
postfix_expr ::= LPAREN type_name RPAREN LBRACE initializer_list COMMA RBRACE.

primary_expr ::= IDENT.
primary_expr ::= constant.
primary_expr ::= STR_LIT.
primary_expr ::= LPAREN expression RPAREN.

constant ::= integer_const. // TODO: floating_const
constant ::= CHAR.
constant ::= ENUMERATION_CONSTANT.

integer_const ::= DECIMAL.
// TODO: integer suffixes, hexadecimal and octal.

Todo List
#########################################
- [ ] standard library.
- [ ] compiler defined constants and macros.
    - [ ] __FILE__
    - [ ] __func__
- [ ] binary literals. - This is a gcc extention.
    - [ ] Maybe look into implementing other gcc extentions.
- [ ] start implementing AST optimizations.
- [ ] compile return 42 program.
- [ ] start implementing a preprocessor.
- [ ] improve errors. - Dont exit after error
- [ ] documentation.
    - [ ] rewrite README.md.
    - [ ] documentation for the backend and front end
- [ ] variable function arguments.
- [ ] write documentation.
    - [ ] AST.
- [ ] AST gen for enums.
    - [ ] enum constants.
- [ ] implement parse_c() to take a file pointer instead of a file name.
- [ ] write realloc_or_die() function.
- [ ] try to remove some AST nodes.
- [ ] semantic checks
    - [ ] Read through the standard.
    - [ ] declarations.
    - [ ] expressions.
        - [ ] addition.
        - [ ] subtraction.
    - [ ] arrays
        - [ ] check that the expression is a constant integer expression.
        - [ ] check the size is greater than zero
        - [ ] handle empty array size.
        - [ ] if the size is * check that it is in function prototype scope.
- [ ] implement a symbol table.
    - [ ] implement a hash table.
        - [ ] Dynamic implementation.
        - [x] static implementation.
- [ ] change code_gen.c to generate assembler instead of machine code.
- [ ] add command line argument parsing to the assembler
- [x] rename jcc to nqoisc-cc
- [x] write a better assembler
- [x] change parse() function to parse_c()
- [x] start implementing semantic checks
- [x] replace malloc() with malloc_or_die()
- [x] ast gen for typedefs.
- [ ] ast gen for structs.
- [x] look at the todos in the code.
- [x] fix memory leaks. - THERE ARE A LOT OF MEMORY LEAKS
- [x] create a test system.
- [x] rename delete_ functions to free_
- [x] fix functions returning pointers.
- [x] AST gen for old style function definitions.
- [ ] finish expression AST gen.
    - [ ] postfix expressions.
        - [x] increment.
        - [x] decrement.
        - [x] structure and union access.
        - [ ] array subscripting.
    - [x] constants.
        - [x] floating point numbers.
        - [x] characters.
    - [ ] sizeof operator. - Mostly done, just size calculations for types.
    - [x] cast expressions.
    - [x] comma expressions.
    - [x] conditional expression.
- [ ] finish declarations.
    - [ ] AST gen for arrays.
    - [x] function declarations.
    - [x] AST gen for pointers.
        - [x] pointer to normal variables.
        - [x] functions returning pointers.
- [x] edit lexer to remove quote marks from strings.
- [x] test declarations in for loop.
- [x] remove return_expr in AstNode
- [x] fix error on empty statement (';').
- [x] add license to repo.
- [x] AST gen for statements.
    - [x] if else statements
    - [x] while loops
    - [x] do while
    - [x] goto
    - [x] continue, break
    - [x] return
    - [x] label statements
    - [x] switch, case and default
    - [x] for loops
- [x] code quality check.
- [x] rewrite the type_to_string() funciton.
- [x] fix parsing conflicts.
    - [x] fix parsing conflicts with old style function definitions.
    - [x] fix array parsing.
- [x] AST gen for function parameters.
- [x] AST gen for decl specs.
    - [ ] inline keyword.
    - [x] AST gen for type qualifiers.
    - [x] AST gen for storage class specifiers.
    - [x] AST gen for type specs.
- [x] fix function definition parsing.
- [x] create AST for return 42 program.
- [x] rename decl to declaration.
- [x] add comments to parser.
- [x] fix if/else parsing.
- [x] parse statements.
- [x] finish parsing declarations.
- [x] error system.

Possible Bugs
#########################################
- Negative numbers in code gen may fail if the host compiler does not use twos compliment

Long Term Todo
#########################################
- [ ] Optimization with genetic algorithm. - Not sure that this is possiable
- [ ] c11 standard
- [ ] rewrite declaration specs pasing.
